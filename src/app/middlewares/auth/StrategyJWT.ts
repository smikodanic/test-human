/**
 * PassportJS authentication middleware
 * Json Web Token STRATEGY
 * https://github.com/themikenicholson/passport-jwt
 *
 * $npm install --save passport-jwt @types/passport-jwt
 *
 * Principles:
 * 1. First you need to get token, which usualy is generated after successful login by username:pass .
 * Jwt token is generated by calling POST /examples/auth/passport/jwtstrategy-gettoken
 * eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjU3YTYwMTY4NGFhZGY3ZTgzYWViZTJlNSIsImlhdCI6MTQ3MDU3MTU2MX0.zwSfbzW6bgYF1D1-yktY86daez-bSgs5YUNQZV1bVoU
 *
 * 2. put that token into header: Authorization: JWT <token>
 * 3. request GET /examples/auth/passport/jwtstrategy
 * 4. JWTStrategy takes config.api_secret and decodes jwt_payload
 */
import * as passport from 'passport';
import * as passportJwt from 'passport-jwt';
import config from '../../config';
import { users_model } from '../../models';


const JWTStrategy = passportJwt.Strategy;
const ExtractJwt = passportJwt.ExtractJwt;


class StrategyJWT {

  static obj() {
    return new this();
  }


  /*
  Define strategy for dashboard login ('users' collection, used username:password to generate JWT token)
  jwt_payload:
  {
    "id": "57a72695370bc50962e345fe",
    "username": "sasa",
    "iat": 1470572244
  }
   */
  defineStrategy4users() {
    'use strict';

    const jwtOpts = {
      secretOrKey: config.api_secret,
      jwtFromRequest: ExtractJwt.fromAuthHeaderWithScheme('jwt')
    };

    passport.use('jwt-users', new JWTStrategy(jwtOpts, (jwt_payload, done) => {
      // jwt_payload is decoded payload
      // console.log('jwt_payload:\n', JSON.stringify(jwt_payload, null, 2));

      const queryObj = {
        _id: jwt_payload.id,
        username: jwt_payload.username
      };

      users_model.getOne(queryObj)
        .then(userDoc => {

          // if user is not found
          if (!userDoc) {
            const err = new Error('Bad token! User id and username given by payload are wrong.');
            return done(err, false);
          }

          /* var 'userDoc' is transfered into req.user and can be used in controller req.user */
          return done(null, userDoc);

        })
        .catch(err => {
          return done(err);
        });

    }));

  }

}


export default StrategyJWT;
